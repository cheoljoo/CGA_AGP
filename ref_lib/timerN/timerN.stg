FileName : timerN.h


/** @page TimergWorkFlow
\dot
 digraph example {
 fontname=Helvetica;
 label="Work Flow";
 rankdir=LR;
 node [shape=record, fontname=Helvetica, fontsize=10,style=rounded];
 sturctg [ label="structg" URL="http://192.203.140.245/aaa/cjlee/structg/STRUCTG/html"];
 hashg [ label="hashg" URL="http://192.203.140.245/aaa/cjlee/hashg/HASHG/html"];
 memg [ label="memg" URL="http://192.203.140.245/aaa/cjlee/memg/MEMG/html"];
 hasho [ label="hasho" URL="http://192.203.140.245/aaa/cjlee/hasho/HASHO/html"];
 timerg [ label="timerg" URL="http://192.203.140.245/aaa/cjlee/timerg/TIMTERG/html"];
 timerN [ label="timerN" URL="http://192.203.140.245/aaa/cjlee/timerN/TIMTERN/html"];

 structg -> hashg [label="Define the TYPEDEF of hashg", arrowhead="normal", style="dashed", fontname=Helvetica, fontsize=10];
 structg -> memg [label="Define the TYPEDEF of memg", arrowhead="normal", style="dashed", fontname=Helvetica, fontsize=10];
 structg -> hasho [label="Define the TYPEDEF of hasho", arrowhead="normal", style="dashed", fontname=Helvetica, fontsize=10];
 structg -> timerg [label="Define the TYPEDEF of timerg", arrowhead="normal", style="dashed", fontname=Helvetica, fontsize=10];
 structg -> timerN [label="Define the TYPEDEF of timerN", arrowhead="normal", style="dashed", fontname=Helvetica, fontsize=10];
 memg -> hasho [label="apply for \n the offset definition\nmemory management", arrowhead="normal", style="dashed", fontname=Helvetica, fontsize=10];
 hashg -> timerN [label="Time Table Management", arrowhead="normal", style="dashed", fontname=Helvetica, fontsize=10];
 hasho -> timerg [label="Time Table Management", arrowhead="normal", style="dashed", fontname=Helvetica, fontsize=10];
}
\enddot
*/


#define TIMERNID		U64

/** 
 * @brief stTIMERNINFO : timer 관리 
 *
 *
 * @see timerN.h 
 *
 *  @note 		timer node들의 정보를 관리해준다. 
 */
typedef struct _st_timerNinfo {
    void  *pstHASHGINFO  ;  	///< TIMER Node array의 pointer (CurrentTime으로부터 1일 이내의 timeout들을 넣어둔다.) 
    U32 uiMaxNodeCnt;           ///< 달릴수 있는 NODE의 MAX
    U32 uiNodeCnt;           	///< Node들의 수 
	U32 uiArgMaxSize;			///< invoke function의 argument의 size중에서 최대값 (이만큼 alloc을 시켜둡니다.)
	U32	uiTimerNIdIndex;		///< 1씩 증가하면서 index를 생성 
	STIME	uiCurrentTime;			///< 현재의 시간 
} stTIMERNINFO;

/** 
 * @brief stTIMERNKEY :  timer hash key structure
 *
 * Hash에서 사용할 timer의 key이다. (시간 : 초가 될 것이다. ) 
 *
 * @see 	timerN.h 
 *
 * @note 	추후 key도 늘릴수 있게 될 것이다. 
 *
 */
typedef struct _st_timerNkey {
	U32	uiTimerNIdIndex;		///< 1씩 증가하면서 index를 생성 
	STIME 	sTimeKey;		///< tTimeKey : 초단위로 hash를 만들 것이다.  (하루 분량) 
} stTIMERNKEY;


#define TIMERN_ARG_MAX_SIZE		100
/** 
 * @brief stTIMERNDATA :  timer hash DATA structure
 *
 * Hash에서 사용할 timer의 DATA 이다. 
 *
 * @see 	timerN.h 
 *
 * @note 	추후 key도 늘릴수 있게 될 것이다. 
 *
 */
typedef struct _st_timerNdata {
	stTIMERNINFO 	*pstTIMERNINFO;	///< Timer 관리 구조
	void (*invoke_func)(void*);     ///< stTIMERNINFO* , stKey* : timer_function pointer - init에서 set
	S32  arg; 				///< usage : pstDATA = (stDATA *) &(...->arg)
} stTIMERNDATA;



S32 timerN_print_key(S8 *pcPrtPrefixStr,S8 *s,S32 len);
int timerN_dump_DebugString(char *debug_str,char *s,int len);
U32 timerN_timeout_func(void *pa,U8 *pb);
stTIMERNINFO * timerN_init(U32 uiMaxNodeCnt,U32 uiArgMaxSize);
TIMERNID timerN_add(stTIMERNINFO *pstTIMERNINFO,void (*invoke_func)(void*),U8 *pArg,U32 uiArgSize,time_t timeout);
void timerN_del(stTIMERNINFO *pstTIMERNINFO,TIMERNID timerN_id);
TIMERNID timerN_update(stTIMERNINFO *pstTIMERNINFO,U64 timerNid,time_t timeout);
void timerN_print_info(S8 *pcPrtPrefixStr,stTIMERNINFO *pstTIMERNINFO);
void timerN_print_nodekey(S8 *pcPrtPrefixStr,stTIMERNINFO *pstTIMERNINFO,stTIMERNKEY *pstTIMERNNODEKEY);
void timerN_print_all(S8 *pcPrtPrefixStr,stTIMERNINFO *pstTIMERNINFO);
void timerN_draw_all(S8 *filename,S8 *labelname,stTIMERNINFO *pstTIMERNINFO);
void timerN_invoke(stTIMERNINFO *pstTIMERNINFO);
