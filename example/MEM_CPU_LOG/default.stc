FileName : chart_example.html
<html>
<head>
	      <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
		  <script type="text/javascript">
google.charts.load('current', {'packages':['line']});
google.charts.setOnLoadCallback(drawChart);

function drawChart() {

	var data = new google.visualization.DataTable();
	data.addColumn('number', 'Day');
	data.addColumn('number', 'Guardians of the Galaxy');
	data.addColumn('number', 'The Avengers');
	data.addColumn('number', 'Transformers: Age of Extinction');

	data.addRows([
			[1,  37.8, 80.8, 41.8],
			[2,  30.9, 69.5, 32.4],
			[3,  25.4,   57, 25.7],
			[4,  11.7, 18.8, 10.5],
			[5,  11.9, 17.6, 10.4],
			[6,   8.8, 13.6,  7.7],
			[7,   7.6, 12.3,  9.6],
			[8,  12.3, 29.2, 10.6],
			[9,  16.9, 42.9, 14.8],
			[10, 12.8, 30.9, 11.6],
			[11,  5.3,  7.9,  4.7],
			[12,  6.6,  8.4,  5.2],
			[13,  4.8,  6.3,  3.6],
			[14,  4.2,  6.2,  3.4]
	]);

	var options = {
		chart: {
			title: 'Box Office Earnings in First Two Weeks of Opening',
			subtitle: 'in millions of dollars (USD)'
		},
		width: 900,
		height: 500
	};

	var chart = new google.charts.Line(document.getElementById('linechart_material'));

	chart.draw(data, google.charts.Line.convertOptions(options));
}
		  </script>

		  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
		  <script type='text/javascript'>
google.charts.load('current', {'packages':['annotationchart']});
google.charts.setOnLoadCallback(drawChart);

function drawChart() {
	var data = new google.visualization.DataTable();
	data.addColumn('date', 'Date');
	ITERATE %MEMCMDLIST +<<+ ITKEY  ITVALUE
		<!-- itkey ITKEY -->
		data.addColumn('number', 'ITKEY');
		data.addColumn('string', 'ProcessMemoryLeak');
	+>>+
	data.addRows([
		ITERATE %MEMCHART +<<+ ITKEY  ITVALUE
			<!-- itkey ITKEY -->
			[new Date(ITKEY)
			ITERATE %MEMCMDLIST +<<+ IT2KEY  IT2VALUE
				<!-- itkey ITKEY , it2key IT2KEY : +<+$MEMCHART{"ITKEY"}{"IT2KEY"}{pss}+>+  -->
				IFNOTEQUAL("+<+$MEMCHART{"ITKEY"}{"IT2KEY"}{pss}+>+" eq ""){
				, +<+$MEMCHART{"ITKEY"}{"IT2KEY"}{pss}+>+, '+<+$MEMCHART{"ITKEY"}{"IT2KEY"}{pssleak}+>+'
				}
				IFEQUAL("+<+$MEMCHART{"ITKEY"}{"IT2KEY"}{pss}+>+" eq ""){
				, 0 ,undefined 
				}
			+>>+
			],
		+>>+
	]);

	var chart = new google.visualization.AnnotationChart(document.getElementById('chart_div'));

	var options = {
		displayAnnotations: true
	};

	chart.draw(data, options);
}
		  </script>

<!--
			  var data = google.visualization.arrayToDataTable([
					  ["APP_Mem_Size", "IT2KEY", {type:'string',role:'annotation'} , "IT2KEY", {type:'string',role:'annotation'} , {role:'style'} ],
					  ["Copper", 8.94, 8.94, 10,10,''],
					  ["Silver", 11.49,9,  9,9,''],
					  ["Gold", 19.30,19.30 ,9,9 ,''],
					  ["Platinum", 21.45, 21.45 , 9, 999 , 'stroke-color: #871B47;stroke-width:8']
			  ]);
-->

ITERATE %MEMPIDCMDLIST +<<+ ITKEY  ITVALUE
	<!-- itkey ITKEY itvalue ITVALUE +<+$MEMPIDCMDLIST{"ITKEY"}+>+ -->
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	<script type="text/javascript">
		  google.charts.load("current", {packages:['corechart','bar']});
		  google.charts.setOnLoadCallback(drawChart);
		  function drawChart() {
			  var data = google.visualization.arrayToDataTable([
					  ["Time_Date", "Value" , {type:'string',role:'annotation'} , {role:'style'} ],
						ITERATE %MEMPIDCMDCHART{ITKEY} +<<+ IT2KEY  IT2VALUE
						<!-- itkey ITKEY ,it2key IT2KEY ,pss +<+$MEMPIDCMDCHART{"ITKEY"}{"IT2KEY"}{pss}+>+ ,leak +<+$MEMPIDCMDCHART{"ITKEY"}{"IT2KEY"}{pssleak}+>+ -->

						IFEQUAL($MEMPIDCMDCHART{"ITKEY"}{"IT2KEY"}{pssleak} eq ""){ ['IT2KEY', +<+$MEMPIDCMDCHART{"ITKEY"}{"IT2KEY"}{pss}+>+ , '+<+$MEMPIDCMDCHART{"ITKEY"}{"IT2KEY"}{pssShort}+>+ :ITKEY' , ''], }
						IFNOTEQUAL($MEMPIDCMDCHART{"ITKEY"}{"IT2KEY"}{pssleak} eq ""){ ['IT2KEY', +<+$MEMPIDCMDCHART{"ITKEY"}{"IT2KEY"}{pss}+>+ , '+<+$MEMPIDCMDCHART{"ITKEY"}{"IT2KEY"}{pssShort}+>+ :ITKEY' , 'stroke-color: #871B47;stroke-width:8'], }
						+>>+
			  ]);

	var view = new google.visualization.DataView(data);

	var options = {
		title: "Title : ITKEY +<+$MEMCMDLIST{"ITKEY"}+>+",
		width: 600,
		height: 400,
		bar: {groupWidth: "95%"},
		legend: { position: "none" },
		annotations: {
		alwaysOutside: true,
			   textStyle: {
				fontSize: 12,
				auraColor: 'none',
				color: '#555'
			   },
				boxStyle: {
					stroke: '#ccc',
					strokeWidth: 1,
					gradient: {
						color1: '#f3e5f5',
						color2: '#f3e5f5',
						x1: '0%', y1: '0%',
						x2: '100%', y2: '100%'
					}
				}
		},
	};

			  var chart = new google.visualization.BarChart(document.getElementById("T_+<+$MEMPIDCMDLIST{"ITKEY"}+>+"));
			  chart.draw(view, options);
		  }
	</script>
+>>+

</head>
<body>
	<div id="linechart_material" style="width: 900px; height: 500px"></div>
	<div id='chart_div' style='width: 1500px; height: 1500px;'></div>
ITERATE %MEMPIDCMDLIST +<<+ ITKEY  ITVALUE
	<div id='T_+<+$MEMPIDCMDLIST{"ITKEY"}+>+' style='width: 800px; height: 400px;'></div>
+>>+
</body>
</html>

FileName : chart_d3.html
http://bl.ocks.org/juan-cb/c2f3329d3fb3b8e4f7ff#index.html
<!DOCTYPE html>
<meta charset="utf-8">
<style>
    body {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        width: 1200px;
        height: 9500px;
        position: relative;
    }
    svg {
        width: 100%;
        height: 100%;
        position: center;
    }
    .toolTip {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        position: absolute;
        display: none;
        width: 450px;
        height: 60px;
        background: none repeat scroll 0 0 white;
        border: 0 none;
        border-radius: 8px 8px 8px 8px;
        box-shadow: -3px 3px 15px #888888;
        color: black;
        font: 12 sans-serif;
        padding: 5px;
        text-align: left;
    }
    .legend {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        font-size: 60%;
    }
    text {
        font: 10px sans-serif;
    }
    .axis text {
        font: 10px sans-serif;
    }
    .axis path{
        fill: none;
        stroke: #000;
    }
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }
    .axis .tick line {
        stroke-width: 1;
        stroke: rgba(0, 0, 0, 0.2);
    }
    .x.axis path {
        display: none;
    }
</style>
<body>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

    dataset = [
ITERATE %RAM +<<+ ITKEY  ITVALUE
        {label:"RAM FREE ITKEY"
		ITERATE %RAM{ITKEY} +<<+ IT2KEY  IT2VALUE
		<!-- itkey ITKEY it2key IT2KEY +>+ -->
		,"IT2KEY": +<+$RAM{"ITKEY"}{IT2KEY}{free}+>+
		+>>+
	},
+>>+

ITERATE -%MEMPIDCMDDMCHART +<<+ ITKEY  ITVALUE
	<!-- itkey ITKEY itvalue ITVALUE +<+$MEMPIDCMDDMCHART{"ITKEY"}+>+ -->
		ITERATE %MEMPIDCMDDMCHART{ITKEY} +<<+ IT2KEY  IT2VALUE
        	{label:"ITKEY IT2KEY"
			ITERATE %MEMPIDCMDDMCHART{ITKEY}{IT2KEY} +<<+ IT3KEY  IT3VALUE
			,"IT3KEY": +<+$MEMPIDCMDDMCHART{"ITKEY"}{"IT2KEY"}{IT3KEY}{pss}+>+ 
			+>>+
		+>>+
	},
+>>+
    ];

    function verticalWrap(text, width) {
        text.each(function() {
            var text = d3.select(this),
                    words = text.text().split(/\s+/).reverse(),
                    word,
                    line = [],
                    lineNumber = 0,
                    lineHeight = 1.1, // ems
                    y = text.attr("y"),
                    x = text.attr("x"),
                    dy = parseFloat(text.attr("dy")),
                    tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");
            while (word = words.pop()) {
                line.push(word);
                tspan.text(line.join(" "));
                if (tspan.node().getComputedTextLength() > width) {
                    line.pop();
                    tspan.text(line.join(" "));
                    line = [word];
                    tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                }
            }
        });
    }


    var margin = {top: (parseInt(d3.select('body').style('height'), 10)/20), right: (parseInt(d3.select('body').style('width'), 10)/20), bottom: (parseInt(d3.select('body').style('height'), 10)/20), left: (parseInt(d3.select('body').style('width'), 10)/10)},
            width = parseInt(d3.select('body').style('width'), 10) - margin.left - margin.right,
            height = parseInt(d3.select('body').style('height'), 10) - margin.top - margin.bottom;

    var y0 = d3.scale.ordinal()
            .rangeRoundBands([height, 0], .2, 0.5);

    var y1 = d3.scale.ordinal();

    var x = d3.scale.linear()
            .range([0, width]);

    var colorRange = d3.scale.category20();
    var color = d3.scale.ordinal()
            .range(colorRange.range());

    var xAxis = d3.svg.axis()
            .scale(x)
            .tickSize(-height)
            .orient("bottom");

    var yAxis = d3.svg.axis()
            .scale(y0)
            .orient("left");
    //.tickFormat(d3.format(".2s"));

    var divTooltip = d3.select("body").append("div").attr("class", "toolTip");


    var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


    var options = d3.keys(dataset[0]).filter(function(key) { return key !== "label"; });

    dataset.forEach(function(d) {
        d.valores = options.map(function(name) { return {name: name, value: +d[name]}; });
    });

    y0.domain(dataset.map(function(d) { return d.label; }));
    y1.domain(options).rangeRoundBands([0, y0.rangeBand()]);
    x.domain([0, d3.max(dataset, function(d) { return d3.max(d.valores, function(d) { return d.value; }); })]);


    svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

    svg.append("g")
            .attr("class", "y axis")
            .call(yAxis);
    /*
     .append("text")
     .attr("transform", "rotate(0)")
     .attr("x", 60)
     .attr("dx", ".71em")
     .style("text-anchor", "end")
     .text("Satisfaction %");
     */

    svg.selectAll(".y.axis .tick text")
            .call(verticalWrap, y0.rangeBand());

    var bar = svg.selectAll(".bar")
            .data(dataset)
            .enter().append("g")
            .attr("class", "rect")
            .attr("transform", function(d) { return "translate( 0,"+ y0(d.label) +")"; });

    var bar_enter = bar.selectAll("rect")
            .data(function(d) { return d.valores; })
            .enter()


    bar_enter.append("rect")
            .attr("height", y1.rangeBand())
            .attr("y", function(d) { return y1(d.name); })
            .attr("x", function(d) { return 0; })
            .attr("value", function(d){return d.name;})
            .attr("width", function(d) { return x(d.value); })
            .style("fill", function(d) { return color(d.name); });

    bar_enter.append("text")
            .attr("x", function(d) { return x(d.value) +5;  })
            .attr("y", function(d) { return y1(d.name) +(y1.rangeBand()/2); })
            .attr("dy", ".35em")
            .text(function(d) { return d.value; });

    bar
            .on("mousemove", function(d){
                divTooltip.style("left", d3.event.pageX+10+"px");
                divTooltip.style("top", d3.event.pageY-25+"px");
                divTooltip.style("display", "inline-block");
                var x = d3.event.pageX, y = d3.event.pageY
                var elements = document.querySelectorAll(':hover');
                l = elements.length
                l = l-1
                elementData = elements[l].__data__
                divTooltip.html((d.label)+"<br>"+elementData.name+"<br>"+elementData.value);
            });
    bar
            .on("mouseout", function(d){
                divTooltip.style("display", "none");
            });

    var legend = svg.selectAll(".legend")
            .data(options.slice())
            .enter().append("g")
            .attr("class", "legend")
            .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

    legend.append("rect")
            .attr("x", width - 18)
            .attr("width", 18)
            .attr("height", 18)
            .style("fill", color);

    legend.append("text")
            .attr("x", width - 24)
            .attr("y", 9)
            .attr("dy", ".35em")
            .style("text-anchor", "end")
            .text(function(d) { return d; });
</script>
</body>
