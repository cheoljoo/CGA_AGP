#include "m_log_extern.h"

/** GetMsgPacket function.
 *
 *  메세지큐 Read
 *
 *  @param      msgq  : 메세지큐 구조체(MsgQHeader + MsgQBody(처리 메세지) 로 구성)
 *
 *  @return     	-1 : error, etc: success
 *  @see        	+See+
 *
 *  @exception  	None
 *  @note       	메세지큐 Recv
 *
**/
int GetMsgPacket(stCom_MsgQHeader *msgq)
{
	int				ret;

	ret = msgrcv(R_Qid, msgq, stCom_MsgQHeader_SIZE, 0, IPC_NOWAIT | MSG_NOERROR);
	if (ret < 0) {
        if( errno != EINTR && errno != ENOMSG ) {
            dAppLog(LOG_DEBUG,"ERR: msgrcv(%s)\n", errno, strerror(errno) );
			return -1;
		}
		return 0;
	}

/*
#ifdef DEBUG
Message_Print(msgq);
#endif
*/

#ifdef TEST
printf("PRN: GetMsgPacket: msgid(%d)\n", msgq->ucMsgID);
#endif

	return ret;
}

/** PutMsgPacket function.
 *
 *  메세지큐를 이용하여 M_LOG 로 메세지를 전달한다.
 *
 *  @param      msgq  : 메세지큐 구조체(MsgQHeader + MsgQBody(처리 메세지) 로 구성)
 *
 *  @return     < 0 : error, etc : success
 *  @see       	co_log_global.h, ims_interface.h
 *
 *  @exception 	None
 *  @note       메세지를 메세지큐를 이용하여 M_LOG 로 보낸다.(메세지큐 이용)
 *              Protocol 메세지만 보낸다.
 *
 *  @메세지 종류
 *
 *   --  CO_LOG와 M_LOG간의 Message Format
 *
 * Protocol 메세지만 전달한다.
 *
 * +-------------------------------------------------------------------------------+
 * | MsgQHeader | MsgQBody( CreateTime | CreateMTime | TMSI | IMSI | IP | Message )|
 * +-------------------------------------------------------------------------------+
 *              |                                                                  |
 *              +------------------- MsgQBody(Max 6144 Byte) ----------------------+ 
 *
**/
int PutMsgPacket(stCom_MsgQHeader *msgq)
{
	int				ret;

	ret = msgsnd(R_Qid, msgq, stCom_MsgQHeader_SIZE, 0);
	if (ret < 0) {
        if( errno != EINTR && errno != ENOMSG ) {
            dAppLog(LOG_DEBUG,"ERR: msgrcv(%s)\n", errno, strerror(errno) );
			return -1;
		}
		return 0;
	}

	return ret;
}

ITERATE %table	+<<+	ITKEY	ITVALUE
void Msg_ITKEY(stCom_MsgQHeader *msgq)
{
	int			i;
	time_t		tCurrTime;
	char		ucCTime[20];

	stFlat_ITKEY		astFlat_ITKEY;

	memset(&astFlat_ITKEY, 0x0, sizeof(astFlat_ITKEY));
	memcpy(&astFlat_ITKEY, msgq->szBody, sizeof(astFlat_ITKEY));

	ITKEY_Dec((ITKEY *)&astFlat_ITKEY, (ITKEY *)&astFlat_ITKEY);

	///  CreateTime Check
	///  Log Table명이 일자별이고 일자는 CreateTime으로 설정한다.
	///  DB에 데이타를 Insert시 Buff를 통째로 던진다. 그러기 위해선 CreateTime(날짜)이 같아야 한다.
	///  그래서 CreateTime으로 메세지와 Buff에 들어가 있는 데이타를 체크하고
	///  Buff와 다르면 지금까지 Buff에 저장되어 있는 데이타를 DB에 저장한다.
	///  만약 CreateTime 체크용 변수에 값이 없으면 메세지들마다 계속 체크해서 
	///  들어온 CreateTime 값을 셋팅한다.

	memset(ucCTime, 0x0, sizeof(ucCTime));
	if (astFlat_ITKEY.stgCoInfollTimetime > 0) {
		MakeDate(astFlat_ITKEY.stgCoInfollTimetime, ucCTime, 14);
		if (strlen(gucCTimeChk_ITKEY) <= 0)
			strncpy(gucCTimeChk_ITKEY, ucCTime, 14);
	}

	tCurrTime = time(NULL);
	/// Buff에 메세지 갯수가 MAX_LOG_COUNT 보다 크거나
	/// timeout 이거나
	/// CreateTime > 0 and CreateTime(날짜)이 다르면
	/// DB에 저장한다.
	if ( (tCurrTime >= gtLastTime_ITKEY + DEF_TIME_INSERT) || (gdMsgCnt_ITKEY >= MAX_LOG_COUNT) || ( strncmp(gucCTimeChk_ITKEY, ucCTime, 12) && (astFlat_ITKEY.stgCoInfollTimetime > 0) ) ) {
		if (gdMsgCnt_ITKEY > 0) {
			/// Insert 함수 Call
			Proc_ITKEY();
			/// Log Buff 초기화
			memset(gastFlat_ITKEY, 0x0, sizeof(gastFlat_ITKEY));
			/// 메세지 Count 초기화
			gdMsgCnt_ITKEY = 0;
		}

		if (msgq->ucMsgID > 0) {
			memcpy(&gastFlat_ITKEY[gdMsgCnt_ITKEY++], &astFlat_ITKEY, sizeof(astFlat_ITKEY));

			/// 메세지에 CreateTime이 있으면 CreateTime을 체크용 데이타로 사용한다.
			memset(gucCTimeChk_ITKEY, 0x0, sizeof(gucCTimeChk_ITKEY));
			if (astFlat_ITKEY.stgCoInfollTimetime > 0)
				strncpy(gucCTimeChk_ITKEY, ucCTime, 14);

			/// timeout Check용 시간 초기화
			gtLastTime_ITKEY = time(NULL);
		}
	}
	else {
		if (msgq->ucMsgID > 0) {
			/// 메세지들을 Buff에 쌓는다.
			memcpy(&gastFlat_ITKEY[gdMsgCnt_ITKEY++], &astFlat_ITKEY, sizeof(astFlat_ITKEY));
		}
	}
}

+>>+
