FileName : LOG_KUN_REQ_HDR.l
Set : iterate_comments = OFF
Set : main_name = LOG_KUN
Set : sub_name = REQ_HDR

/* scanner for a toy Pascal-like language */

%{
/* need this for the call to atof() below */
#include <math.h>
#include "L7.h"

+<+$main_name+>+ *p+<+$main_name+>+;

#define STG_INTEGER		1
#define STG_STRING		2

/*
#define DEBUG_LEX
*/


/** Set_Value function.
 *
 *  값을 Set하기 위한 함수. Type에 따라 Set을 수행.
 *
 *  @param      ToType  : STG_INTEGER or STG_STRING
 *  @param      ToPtr  :  destination pointer copying from from_value
 *  @param      ToSize  : allocation bytes size
 *  @param      FromType  : STG_INTEGER or STG_STRING
 *  @param      FromPtr  :  source pointer copying to destination
 *  @param      FromSize  : source bytes size
 *
 *  @return		SUCCESS : 0 , FAIL 1
 *
 *  @note		이 함수를 이용하여 자동화시 생성되는 값들에 대한 Set을 수행한다.
 *			
**/
int Set_Value( int ToType, char *ToPtr , int ToSize
		,int FromType, char *FromPtr , int FromSize)
{
	if( (ToType == STG_INTEGER) && (FromType == STG_INTEGER) ){
		if(ToSize != FromSize) { 
			printf (" ERROR : value size is wrong!!! \n"); 
			return 1;
		}
		memcpy(ToPtr , FromPtr , ToSize);
	} else if( (ToType == STG_INTEGER) && (FromType == STG_STRING) ) {
		if(ToSize == 4){
			* ( (int *) ToPtr)		= atoi(FromPtr);
		} else if(ToSize == 2){
			* ( (short *) ToPtr) 	= atoi(FromPtr);
		} else if(ToSize == 1){
			* ( (char *) ToPtr)		= atoi(FromPtr);
		} else {
			printf (" ERROR : INTEGER value's size is wrong!!! \n"); 
			return 1;
		}
	} else if( (ToType == STG_STRING) && (FromType == STG_INTEGER) ) {
		char buf[BUFSIZ];
		sprintf(buf,"%d",* ( (int *) FromPtr));
		if(strlen(buf) >= ToSize){
			printf (" ERROR : INTEGER value is very large!!! \n"); 
			return 1;
		} else {
			sprintf(ToPtr,"%d",* ( (int *) FromPtr));
		}
	} else {		/* ( (ToType == STG_STRING) && (FromType == STG_STRING) ) */
		int size;
		if(FromSize > (ToSize-1) ){ size = ToSize -1; }
		else { size = FromSize; }
		memcpy(ToPtr, FromPtr, size);
		ToPtr[size] = 0;
	}

	return 0;
}


%}

+<+$LEX_TOKEN_RESULT{+<+$main_name+>+}+>+

ITERATE %+<+$main_name+>+_MSG_STATE_+<+$sub_name+>+  +<<+ 	ITKEY    ITVALUE
%s 		ITKEY
+>>+


%%

ITERATE %+<+$main_name+>+_MSG_STATE_+<+$sub_name+>+  +<<+ 	ITKEY    ITVALUE
ITVALUE 		{
	BEGIN	ITKEY;
	printf("%s\n","ITKEY ITVALUE");
}
	ITERATE %+<+$main_name+>+_MSG_RULE_+<+$sub_name+>+_ITKEY  +<<+ 	IT2KEY    IT2VALUE
		IT2KEY 			{
		printf("%s = %s\n"
			, "+<+$+<+$main_name+>+_MSG_RULE_VAR_NAME_+<+$sub_name+>+_ITKEY{IT2KEY}+>+"
			, yytext + +<+$+<+$main_name+>+_MSG_RULE_SKIP_LENGTH_+<+$sub_name+>+_ITKEY{IT2KEY}+>+ 
		);
		Set_Value(
		      (int) +<+$type_set_type{ +<+$+<+$main_name+>+_MSG_RULE_VAR_TYPE_+<+$sub_name+>+_ITKEY{IT2KEY}+>+ }+>+
			, (char *) p+<+$main_name+>+->+<+$+<+$main_name+>+_MSG_RULE_VAR_NAME_+<+$sub_name+>+_ITKEY{IT2KEY}+>+
			, (int) +<+$+<+$main_name+>+_MSG_RULE_SIZE_+<+$sub_name+>+_ITKEY{IT2KEY}+>+
			, (int) STG_STRING
			, (char *) yytext + +<+$+<+$main_name+>+_MSG_RULE_SKIP_LENGTH_+<+$sub_name+>+_ITKEY{IT2KEY}+>+
			, (int) yyleng - +<+$+<+$main_name+>+_MSG_RULE_SKIP_LENGTH_+<+$sub_name+>+_ITKEY{IT2KEY}+>+ );

		}

	+>>+
<ITKEY>(+<+$LEX_LINEFEED{+<+$main_name+>+}+>+) {
	BEGIN 0;
}
<ITKEY>. 
+>>+



(+<+$LEX_FORMFEED{+<+$main_name+>+}+>+) {
	return ;
}

.		{ printf("unrecognized : %s\n",yytext); }

%%
Set : iterate_comments = ON

/** main function : starting function for TEST
 *
 * KUN request head has the "Host:" parameter.
 * This tests "Host:" parameter through upper library function. ()
 * 
 *
 * @param argc	: running parameter count
 * @param argv	: running parameter value
 *
 *  @return     void
 *
 *  @note       You may observe the yy_?? function. \n and I will use the supporting library function.
@code
int LOG_KUN_REQ_HDR_LEX(char *sp
		,int slen
		,LOG_KUN_REQ_HDR *pLOG_KUN_REQ_HDR)
+<+$main_name+>+_+<+$sub_name+>+_LEX
+<+$main_name+>+_+<+$sub_name+>+
*p+<+$main_name+>+_+<+$sub_name+>+
@endcode
 **/
int +<+$main_name+>+_+<+$sub_name+>+_LEX (char *sp
		,int slen
		,char *dp)
{
	p+<+$main_name+>+ = (+<+$main_name+>+ *)dp;
	yy_scan_bytes(sp,slen);
	yylex();

	LOG_KUN_Prt("LOG_KUN ", p+<+$main_name+>+);

	return 1;
}



#ifdef TEST
/** main function : starting function for TEST
 *
 * KUN request head has the "Host:" parameter.
 * This tests "Host:" parameter through upper library function. ()
 * 
 *
 * @param argc	: running parameter count
 * @param argv	: running parameter value
 *
 *  @return     void
 *
 *  @note       You may observe the yy_?? function. \n and I will use the supporting library function.
 **/
int main( argc, argv )
int argc;
char **argv;
{

	char s[1000],d[1000];
    sprintf(s,"Host: TEF.ETE\r\n");

	
	+<+$main_name+>+_+<+$sub_name+>+_LEX (s,strlen(s),d);

	return 0;

}
#endif



